apply plugin: 'jacoco'

jacoco {
    toolVersion = "0.8.1"
    // Custom reports directory can be specfied like this:
    // reportsDir = file("$buildDir/customJacocoReportDir")
}

tasks.withType(Test) {
    jacoco.includeNoLocationClasses = true
}

project.afterEvaluate {

    android.applicationVariants.all { variant ->
        def variantName = variant.name
        def taskName = "${variantName.capitalize()}UnitTest"
        def testTaskName = "test${variantName.capitalize()}UnitTest"

        tasks.create(name: "jacoco${taskName}Report", type: JacocoReport, dependsOn: "$testTaskName") {
            group = "Reporting"
            description = "Generate Jacoco coverage reports for the ${variantName.capitalize()} build."

            reports {
                html.enabled = true
                xml.enabled = true
            }

            def excludes = [
                    '**/R.class',
                    '**/R$*.class',
                    '**/BuildConfig.*',
                    '**/Manifest*.*',
                    '**/*Test*.*',
                    'android/**/*.*',
                    '**/Dagger*Component.class',
                    '**/Dagger*Component$Builder.class',
                    '**/*Module_*Factory.class',
                    "**/*Module.*", // Modules for Dagger.
                    "**/*Module.*", // Modules for Dagger.
                    "**/*Dagger*.*", // Dagger auto-generated code.
                    "**/*MembersInjector*.*", // Dagger auto-generated code.
                    "**/*_Provide*Factory*.*",

                    //Data classes
                    "*com/movie/app/net/data/entity/**",
                    "*com/movie/app/net/data/response/**",
                    "**/*ViewModel.*", // Modules for Dagger.

                    //RX
                    "*com/movie/app/net/rx/transformer/RetryTransformers.class",
                    "*com/movie/app/net/rx/SchedulerFactory.class",
                    "*com/movie/app/net/provider/**",

                    //Settings
                    "*com/movie/app/net/settings/AppNetworkSettings.class"
            ]
            def javaClasses = fileTree(dir: variant.javaCompiler.destinationDir, excludes: excludes)
            def kotlinClasses = fileTree(dir: "${buildDir}/tmp/kotlin-classes/${variantName}", excludes: excludes)
            classDirectories = files([javaClasses, kotlinClasses])

            sourceDirectories = files([
                    "$project.projectDir/src/main/java",
                    "$project.projectDir/src/${variantName}/java",
                    "$project.projectDir/src/main/kotlin",
                    "$project.projectDir/src/${variantName}/kotlin"
            ])

            executionData = files([
                    "${project.buildDir}/jacoco/${testTaskName}.exec"
            ])
        }
    }
}


